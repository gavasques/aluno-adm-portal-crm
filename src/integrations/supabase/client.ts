
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { ENVIRONMENT, CORS_LOGGER } from '@/config/cors';

const SUPABASE_URL = "https://qflmguzmticupqtnlirf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmbG1ndXptdGljdXBxdG5saXJmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc3MDkzOTUsImV4cCI6MjA2MzI4NTM5NX0.0aHGL_E9V9adyonhJ3fVudjxDnHXv8E3tIEXjby9qZM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'x-application-name': 'crm-lead-management',
      'x-client-info': 'lovable-crm-client'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced diagnostics and monitoring
const setupSupabaseMonitoring = () => {
  if (typeof window === 'undefined') return;

  // Monitor auth state changes
  supabase.auth.onAuthStateChange((event, session) => {
    console.log(`🔐 [SUPABASE_AUTH] ${event}:`, {
      hasSession: !!session,
      userId: session?.user?.id,
      timestamp: new Date().toISOString()
    });

    // Log potential CORS issues during auth
    if (event === 'SIGNED_OUT' && !session) {
      console.log('🔍 [SUPABASE_AUTH] Logout detected - checking for CORS issues');
    }
  });

  // Global error handler for Supabase operations
  const originalFrom = supabase.from;
  supabase.from = function(table: string) {
    const query = originalFrom.call(this, table);
    
    // Wrap common operations to log CORS errors
    const wrapOperation = (operation: any, operationName: string) => {
      return async (...args: any[]) => {
        try {
          const result = await operation.apply(query, args);
          
          if (result.error) {
            CORS_LOGGER.logError(result.error, `${operationName} on ${table}`);
            
            // Check if it's a CORS-related error
            if (result.error.message?.includes('CORS') || 
                result.error.message?.includes('cross-origin') ||
                result.error.message?.includes('Access-Control-Allow-Origin')) {
              console.error(`🚫 [CORS_ERROR] ${operationName} on ${table} failed due to CORS`);
            }
          }
          
          return result;
        } catch (error: any) {
          CORS_LOGGER.logError(error, `${operationName} on ${table} (catch)`);
          throw error;
        }
      };
    };

    // Wrap key operations
    if (query.select) query.select = wrapOperation(query.select, 'SELECT');
    if (query.insert) query.insert = wrapOperation(query.insert, 'INSERT');
    if (query.update) query.update = wrapOperation(query.update, 'UPDATE');
    if (query.delete) query.delete = wrapOperation(query.delete, 'DELETE');

    return query;
  };
};

// Setup monitoring
setupSupabaseMonitoring();

// Debug info for diagnostics
if (typeof window !== 'undefined') {
  (window as any).supabaseClient = supabase;
  (window as any).corsEnvironment = {
    isLovable: ENVIRONMENT.isLovable(),
    origin: ENVIRONMENT.getOrigin(),
    allowedOrigins: ENVIRONMENT.getAllowedOrigins()
  };
  
  console.log('🔧 [SUPABASE_CLIENT] Cliente otimizado configurado:', {
    url: SUPABASE_URL,
    hasKey: !!SUPABASE_PUBLISHABLE_KEY,
    keyPreview: SUPABASE_PUBLISHABLE_KEY.slice(0, 20) + '...',
    environment: {
      isLovable: ENVIRONMENT.isLovable(),
      isProduction: ENVIRONMENT.isProduction(),
      isDevelopment: ENVIRONMENT.isDevelopment()
    },
    origin: ENVIRONMENT.getOrigin(),
    hostname: window.location.hostname
  });
}
