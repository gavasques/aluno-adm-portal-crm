
import { useCallback } from "react";

interface UseAccessManagementProps {
  isAdmin: boolean;
  allowAdminAccess: boolean;
  setAllowAdminAccess: (value: boolean) => void;
}

export const useAccessManagement = ({
  isAdmin,
  allowAdminAccess,
  setAllowAdminAccess,
}: UseAccessManagementProps) => {
  // Handler para allowAdminAccess com valida√ß√µes de seguran√ßa APRIMORADAS
  const handleAllowAdminAccessChange = useCallback((value: boolean) => {
    console.log("=== ALLOW ADMIN ACCESS CHANGE (FINAL SAFE) ===");
    console.log("Mudando allowAdminAccess de", allowAdminAccess, "para", value);
    console.log("isAdmin atual:", isAdmin);
    
    if (!isAdmin) {
      // Para usu√°rios n√£o-admin completo, permitir altera√ß√£o do allowAdminAccess
      // CR√çTICO: N√ÉO tocar nos menus aqui - eles devem ser preservados!
      console.log("‚úÖ Usu√°rio n√£o √© admin completo - alterando allowAdminAccess");
      console.log("üîí GARANTINDO preserva√ß√£o dos menus selecionados");
      console.log("üìù IMPORTANTE: Esta mudan√ßa N√ÉO deve afetar selectedMenus");
      setAllowAdminAccess(value);
      
      if (value) {
        console.log("üü° Usu√°rio agora √© ADMIN LIMITADO - menus PRESERVADOS");
      } else {
        console.log("üîµ Usu√°rio voltou a ser USU√ÅRIO NORMAL - menus PRESERVADOS");
      }
    } else {
      // Admin completo sempre tem allowAdminAccess = true
      console.log("‚ö†Ô∏è Admin completo - mantendo allowAdminAccess = true");
      setAllowAdminAccess(true);
    }
    
    console.log("===============================================");
  }, [isAdmin, allowAdminAccess, setAllowAdminAccess]);

  return {
    handleAllowAdminAccessChange,
  };
};
