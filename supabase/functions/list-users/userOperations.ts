
import { SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";

export async function deleteUserOperation(
  supabaseAdmin: SupabaseClient,
  userId: string,
  userEmail: string
): Promise<{ success: boolean; error?: string; message?: string; inactivated?: boolean }> {
  console.log(`üóëÔ∏è [DELETE_OPERATION] ===== INICIANDO EXCLUS√ÉO =====`);
  console.log(`üóëÔ∏è [DELETE_OPERATION] Usu√°rio: ${userEmail} (ID: ${userId})`);
  console.log(`üóëÔ∏è [DELETE_OPERATION] Timestamp: ${new Date().toISOString()}`);
  console.log(`üóëÔ∏è [DELETE_OPERATION] ==============================`);
  
  try {
    if (!userId || !userEmail) {
      console.error('‚ùå [DELETE_OPERATION] VALIDA√á√ÉO FALHOU: Par√¢metros obrigat√≥rios faltando:', { userId, userEmail });
      return { success: false, error: 'ID do usu√°rio e email s√£o obrigat√≥rios' };
    }

    // ETAPA 1: Verificar se o usu√°rio existe no auth
    console.log('üîç [DELETE_OPERATION] ETAPA 1: Verificando exist√™ncia no Supabase Auth...');
    
    let authUser;
    try {
      const { data: authUserData, error: authCheckError } = await supabaseAdmin.auth.admin.getUserById(userId);
      
      if (authCheckError) {
        console.error('‚ùå [DELETE_OPERATION] ETAPA 1 - Erro na verifica√ß√£o do auth:', authCheckError);
        return { success: false, error: `Erro ao verificar usu√°rio: ${authCheckError.message}` };
      }
      
      authUser = authUserData.user;
      console.log(`üìä [DELETE_OPERATION] ETAPA 1 - Resultado:`, {
        exists: !!authUser,
        id: authUser?.id,
        email: authUser?.email
      });
    } catch (error) {
      console.error('‚ùå [DELETE_OPERATION] ETAPA 1 - Exce√ß√£o na verifica√ß√£o:', error);
      return { success: false, error: `Exce√ß√£o ao verificar usu√°rio: ${error.message}` };
    }

    if (!authUser) {
      console.log('‚ö†Ô∏è [DELETE_OPERATION] Usu√°rio n√£o encontrado no auth, removendo apenas do perfil...');
      
      // ETAPA 1.1: Remover apenas do perfil se n√£o existe no auth
      console.log('üîÑ [DELETE_OPERATION] ETAPA 1.1: Removendo perfil...');
      try {
        const { error: profileError } = await supabaseAdmin
          .from('profiles')
          .delete()
          .eq('id', userId);

        if (profileError) {
          console.error('‚ùå [DELETE_OPERATION] ETAPA 1.1 FALHOU: Erro ao remover perfil:', profileError);
          return { success: false, error: `Erro ao remover perfil: ${profileError.message}` };
        }

        console.log('‚úÖ [DELETE_OPERATION] ETAPA 1.1 SUCESSO: Perfil removido');
        return { 
          success: true, 
          message: 'Usu√°rio removido com sucesso (perfil apenas)' 
        };
      } catch (error) {
        console.error('‚ùå [DELETE_OPERATION] ETAPA 1.1 EXCE√á√ÉO:', error);
        return { success: false, error: `Exce√ß√£o ao remover perfil: ${error.message}` };
      }
    }

    // ETAPA 2: Verificar se o usu√°rio tem dados associados
    console.log('üîç [DELETE_OPERATION] ETAPA 2: Verificando dados associados...');
    
    try {
      const checks = await Promise.all([
        supabaseAdmin.from('my_suppliers').select('id').eq('user_id', userId).limit(1),
        supabaseAdmin.from('user_files').select('id').eq('user_id', userId).limit(1),
        supabaseAdmin.from('mentoring_enrollments').select('id').eq('student_id', userId).limit(1),
        supabaseAdmin.from('my_supplier_comments').select('id').eq('user_id', userId).limit(1),
        supabaseAdmin.from('my_supplier_ratings').select('id').eq('user_id', userId).limit(1)
      ]);

      // Log detalhado dos resultados das verifica√ß√µes
      const checkResults = {
        my_suppliers: checks[0].data?.length || 0,
        user_files: checks[1].data?.length || 0,
        mentoring_enrollments: checks[2].data?.length || 0,
        my_supplier_comments: checks[3].data?.length || 0,
        my_supplier_ratings: checks[4].data?.length || 0
      };
      
      console.log('üìä [DELETE_OPERATION] ETAPA 2 RESULTADOS:', checkResults);

      const hasAssociatedData = checks.some(check => 
        check.data && check.data.length > 0
      );

      console.log(`üìä [DELETE_OPERATION] ETAPA 2 CONCLUS√ÉO: hasAssociatedData = ${hasAssociatedData}`);

      if (hasAssociatedData) {
        console.log('‚ö†Ô∏è [DELETE_OPERATION] ETAPA 3: Usu√°rio possui dados associados, inativando...');
        
        // ETAPA 3: Inativar o usu√°rio ao inv√©s de excluir
        console.log('üîÑ [DELETE_OPERATION] ETAPA 3: Executando inativa√ß√£o...');
        try {
          const { error: updateError } = await supabaseAdmin
            .from('profiles')
            .update({ 
              status: 'Inativo',
              updated_at: new Date().toISOString()
            })
            .eq('id', userId);

          if (updateError) {
            console.error('‚ùå [DELETE_OPERATION] ETAPA 3 FALHOU: Erro ao inativar usu√°rio:', updateError);
            return { success: false, error: `Erro ao inativar usu√°rio: ${updateError.message}` };
          }

          console.log('‚úÖ [DELETE_OPERATION] ETAPA 3 SUCESSO: Usu√°rio inativado');
          
          // VERIFICA√á√ÉO P√ìS-INATIVA√á√ÉO
          console.log('üîç [DELETE_OPERATION] VERIFICA√á√ÉO P√ìS-INATIVA√á√ÉO...');
          const { data: verifyProfile } = await supabaseAdmin
            .from('profiles')
            .select('status')
            .eq('id', userId)
            .single();
          
          if (verifyProfile?.status === 'Inativo') {
            console.log('‚úÖ [DELETE_OPERATION] VERIFICA√á√ÉO: Status confirmado como Inativo');
            return { 
              success: true, 
              inactivated: true,
              message: 'Usu√°rio inativado porque possui dados associados' 
            };
          } else {
            console.error('‚ùå [DELETE_OPERATION] VERIFICA√á√ÉO FALHOU: Status n√£o foi alterado');
            return { success: false, error: 'Falha na verifica√ß√£o: status n√£o foi alterado' };
          }
        } catch (error) {
          console.error('‚ùå [DELETE_OPERATION] ETAPA 3 EXCE√á√ÉO:', error);
          return { success: false, error: `Exce√ß√£o ao inativar usu√°rio: ${error.message}` };
        }
      }
    } catch (error) {
      console.error('‚ùå [DELETE_OPERATION] ETAPA 2 EXCE√á√ÉO:', error);
      return { success: false, error: `Exce√ß√£o ao verificar dados associados: ${error.message}` };
    }

    console.log('üóëÔ∏è [DELETE_OPERATION] ETAPA 4: Usu√°rio sem dados associados, prosseguindo com exclus√£o completa...');
    
    // ETAPA 4: Remover o perfil primeiro
    console.log('üîÑ [DELETE_OPERATION] ETAPA 4.1: Removendo perfil do banco...');
    try {
      const { error: profileError } = await supabaseAdmin
        .from('profiles')
        .delete()
        .eq('id', userId);

      if (profileError) {
        console.error('‚ùå [DELETE_OPERATION] ETAPA 4.1 FALHOU: Erro ao remover perfil:', profileError);
        return { success: false, error: `Erro ao remover perfil: ${profileError.message}` };
      }

      console.log('‚úÖ [DELETE_OPERATION] ETAPA 4.1 SUCESSO: Perfil removido do banco');
    } catch (error) {
      console.error('‚ùå [DELETE_OPERATION] ETAPA 4.1 EXCE√á√ÉO:', error);
      return { success: false, error: `Exce√ß√£o ao remover perfil: ${error.message}` };
    }

    // ETAPA 5: Remover do auth
    console.log('üîÑ [DELETE_OPERATION] ETAPA 4.2: Removendo do Supabase Auth...');
    try {
      const { error: authError } = await supabaseAdmin.auth.admin.deleteUser(userId);
      
      if (authError) {
        console.error('‚ùå [DELETE_OPERATION] ETAPA 4.2 FALHOU: Erro ao remover usu√°rio do auth:', authError);
        return { success: false, error: `Erro ao remover do auth: ${authError.message}` };
      }

      console.log('‚úÖ [DELETE_OPERATION] ETAPA 4.2 SUCESSO: Usu√°rio removido do auth');
    } catch (error) {
      console.error('‚ùå [DELETE_OPERATION] ETAPA 4.2 EXCE√á√ÉO:', error);
      return { success: false, error: `Exce√ß√£o ao remover do auth: ${error.message}` };
    }
    
    // ETAPA 6: Verifica√ß√£o final OBRIGAT√ìRIA
    console.log('üîç [DELETE_OPERATION] ETAPA 5: Verifica√ß√£o final OBRIGAT√ìRIA...');
    try {
      // Verificar se ainda existe no auth
      const { data: verificationCheck } = await supabaseAdmin.auth.admin.getUserById(userId);
      console.log('üìä [DELETE_OPERATION] ETAPA 5 - Verifica√ß√£o Auth:', {
        stillExistsInAuth: !!verificationCheck.user,
        deletionSuccessful: !verificationCheck.user
      });
      
      // Verificar se ainda existe no profiles
      const { data: profileCheck } = await supabaseAdmin
        .from('profiles')
        .select('id')
        .eq('id', userId)
        .single();
      
      console.log('üìä [DELETE_OPERATION] ETAPA 5 - Verifica√ß√£o Profile:', {
        stillExistsInProfiles: !!profileCheck,
        profileDeleted: !profileCheck
      });
      
      if (verificationCheck.user || profileCheck) {
        console.error('‚ùå [DELETE_OPERATION] VERIFICA√á√ÉO FALHOU: Usu√°rio ainda existe ap√≥s tentativa de exclus√£o');
        return { 
          success: false, 
          error: 'Falha na verifica√ß√£o: usu√°rio ainda existe no sistema ap√≥s exclus√£o' 
        };
      }
    } catch (verificationError) {
      // Se der erro na verifica√ß√£o, √© prov√°vel que o usu√°rio realmente n√£o existe mais
      console.log('‚úÖ [DELETE_OPERATION] ETAPA 5: Usu√°rio n√£o encontrado nas verifica√ß√µes (confirmando exclus√£o bem-sucedida)');
    }

    console.log('üéâ [DELETE_OPERATION] ===== PROCESSO COMPLETO =====');
    console.log('üéâ [DELETE_OPERATION] Usu√°rio exclu√≠do com sucesso');
    console.log('üéâ [DELETE_OPERATION] =============================');
    
    return { 
      success: true, 
      message: 'Usu√°rio exclu√≠do com sucesso' 
    };

  } catch (error: any) {
    console.error('üí• [DELETE_OPERATION] ERRO INESPERADO CR√çTICO:', {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString(),
      userId,
      userEmail
    });
    return { 
      success: false, 
      error: `Erro inesperado: ${error.message}` 
    };
  }
}

// Fun√ß√£o de teste manual para verificar conectividade
export async function testDeleteConnectivity(
  supabaseAdmin: SupabaseClient
): Promise<{ success: boolean; message: string; details?: any }> {
  console.log('üß™ [TEST_CONNECTIVITY] Iniciando teste de conectividade...');
  
  try {
    // Testar conex√£o com auth
    const { data: authTest } = await supabaseAdmin.auth.admin.listUsers({ page: 1, perPage: 1 });
    console.log('‚úÖ [TEST_CONNECTIVITY] Auth: Conex√£o OK');
    
    // Testar conex√£o com profiles
    const { data: profileTest } = await supabaseAdmin
      .from('profiles')
      .select('id')
      .limit(1);
    console.log('‚úÖ [TEST_CONNECTIVITY] Profiles: Conex√£o OK');
    
    return {
      success: true,
      message: 'Conectividade verificada com sucesso',
      details: {
        auth: !!authTest,
        profiles: !!profileTest,
        timestamp: new Date().toISOString()
      }
    };
  } catch (error: any) {
    console.error('‚ùå [TEST_CONNECTIVITY] Erro:', error);
    return {
      success: false,
      message: `Falha na conectividade: ${error.message}`,
      details: { error: error.message }
    };
  }
}
