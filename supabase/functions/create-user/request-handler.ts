
import { CreateUserRequest, CreateUserResponse } from './types.ts';
import { validateUserData } from './validation.ts';
import { checkUserExists, createAuthUser, createUserProfile } from './user-operations.ts';

export async function parseRequestBody(req: Request): Promise<CreateUserRequest> {
  let requestBody;
  try {
    requestBody = await req.text();
    console.log("üìù Body da requisi√ß√£o recebido (tamanho):", requestBody.length);
    console.log("üìù Body da requisi√ß√£o:", requestBody);
  } catch (error) {
    console.error("‚ùå Erro ao ler o body da requisi√ß√£o:", error);
    throw new Error('Erro ao ler dados da requisi√ß√£o');
  }

  if (!requestBody || requestBody.trim() === '') {
    console.error("‚ùå Body da requisi√ß√£o est√° vazio");
    throw new Error('Body da requisi√ß√£o est√° vazio');
  }
  
  let userData;
  try {
    userData = JSON.parse(requestBody);
    console.log("‚úÖ Dados parseados:", { ...userData, password: userData.password ? "***" : "n√£o definida" });
  } catch (parseError) {
    console.error("‚ùå Erro ao fazer parse do JSON:", parseError);
    throw new Error('JSON inv√°lido no corpo da requisi√ß√£o');
  }

  return userData as CreateUserRequest;
}

export async function handleUserCreation(userData: CreateUserRequest, supabaseAdmin: any): Promise<CreateUserResponse> {
  const { email, name, role, password, is_mentor } = userData;

  console.log("üìã Dados extra√≠dos:", { email, name, role, is_mentor, hasPassword: !!password });

  // Valida√ß√µes b√°sicas
  const validation = validateUserData(userData);
  if (!validation.isValid) {
    console.error("‚ùå Campos obrigat√≥rios faltando:", validation.errors);
    throw new Error(validation.errors[0]);
  }

  // Verificar se o usu√°rio j√° existe
  const { authUserExists, profileExists } = await checkUserExists(email, supabaseAdmin);
  
  if (authUserExists || profileExists) {
    console.log("‚ùå Usu√°rio j√° existe no sistema");
    return { 
      success: false, 
      existed: true, 
      error: 'Usu√°rio j√° cadastrado no sistema' 
    };
  }

  console.log("‚úÖ Usu√°rio n√£o existe, prosseguindo com a cria√ß√£o...");

  // Criar o usu√°rio
  const authUser = await createAuthUser(userData, supabaseAdmin);
  
  // Criar o profile do usu√°rio
  await createUserProfile(authUser, userData, supabaseAdmin);

  console.log("‚úÖ Profile criado com sucesso");
  console.log("=== USU√ÅRIO CRIADO COM SUCESSO ===");
  
  return { success: true, existed: false };
}
